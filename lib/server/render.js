const fs = require('fs-extra');
const React = require('react');
const renderToStaticMarkup = require('react-dom/server').renderToStaticMarkup;

const path = require('path');
const join = path.join;

const readMetadata = require('./readMetadata.js');
const toSlug = require('../core/toSlug.js');
const DocsLayout = require('../core/DocsLayout.js');
const MarkdownBlock = require('../core/MarkdownBlock.js');

const CWD = process.cwd();
const siteConfig = require(CWD + '/siteConfig.js');

class Markdown {
  // links to markdown files => links to their website htmls
  mdToHtml(Metadata) {
    const mdToHtml = {};
    Object.keys(Metadata).forEach(id => {
      const metadata = Metadata[id];
      mdToHtml[metadata.source] =
        siteConfig.baseUrl + metadata.permalink.replace('/next/', '/');
    });
    return mdToHtml;
  }
}

class Docs {
  tableOfContent(content) {
    const regexp = /\n###\s+(`.*`.*)\n/g;
    let match;
    const headers = [];
    while ((match = regexp.exec(content))) {
      headers.push(match[1]);
    }

    return headers
      .map(header => `  - [${header}](#${toSlug(header)})`)
      .join('\n');
  }

  render(metadata, mdToHtml) {
    const file = join(CWD, 'docs', metadata.source);
    if (!fs.existsSync(file)) {
      return;
    }

    let rawContent = readMetadata.extractMetadata(fs.readFileSync(file, 'utf8'))
      .rawContent;

    const layout = metadata.layout;

    // table of content
    const TABLE_OF_CONTENTS_TOKEN = '<AUTOGENERATED_TABLE_OF_CONTENTS>';
    const toc = this.tableOfContent(rawContent);
    rawContent = rawContent.replace(TABLE_OF_CONTENTS_TOKEN, toc);

    // markdown links
    Object.keys(mdToHtml).forEach(function(key, index) {
      const link = mdToHtml[key];
      rawContent = rawContent.replace(
        new RegExp('\\]\\((\\./)?' + key, 'g'),
        '](' + link
      );
    });

    // asset links
    rawContent = rawContent.replace(
      /\]\(assets\//g,
      '](' + siteConfig.baseUrl + 'docs/assets/'
    );

    let Doc;
    if (layout && siteConfig.layouts && siteConfig.layouts[layout]) {
      Doc = siteConfig.layouts[layout]({
        React,
        MarkdownBlock: MarkdownBlock,
      });
    }

    const docComp = (
      <DocsLayout
        metadata={metadata}
        config={siteConfig}
        Doc={Doc}>
        {rawContent}
      </DocsLayout>
    );

    return renderToStaticMarkup(docComp);
  }
}

class Pages {
  render() {
  }
}

module.exports = {
  markdown: new Markdown(),
  docs: new Docs(),
};
